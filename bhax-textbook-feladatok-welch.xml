<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            Valósítsd meg C++-ban és Java-ban az módosított polártranszformációs algoritmust! A matek háttér 
            teljesen irreleváns, csak annyiban érdekes, hogy az algoritmus egy számítása során két normálist
            számol ki, az egyiket elspájzolod és egy további logikai taggal az osztályban jelzed, hogy van vagy
            nincs eltéve kiszámolt szám.
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
<programlisting ><![CDATA[
#include <iostream>
#include <cstdlib>
#include <cmath>
#include <ctime>

class PolarGen
{
public:
  PolarGen ()
  {
    nincsTarolt = true;
    std::srand (std::time (NULL));
  }
   ~PolarGen ()
  {
  }
  double kovetkezo ()
  {
    if (nincsTarolt)
      {
        double u1, u2, v1, v2, w;
        do
    {
      u1 = std::rand () / (RAND_MAX + 1.0);
      u2 = std::rand () / (RAND_MAX + 1.0);
      v1 = 2 * u1 - 1;
      v2 = 2 * u2 - 1;
      w = v1 * v1 + v2 * v2;
    }
        while (w > 1);

        double r = std::sqrt ((-2 * std::log (w)) / w);

        tarolt = r * v2;
        nincsTarolt = !nincsTarolt;

        return r * v1;
      }
    else
      {
        nincsTarolt = !nincsTarolt;
        return tarolt;
      }
  }



private:
  bool nincsTarolt;
  double tarolt;

};


int
main (int argc, char **argv)
{
  PolarGen pg;

  for (int i = 0; i < 10; ++i)
    std::cout << pg.kovetkezo () << std::endl;

  return 0;
}
]]></programlisting>
"               
        </para>
        <para>
        <programlisting ><![CDATA[    "
                              import java.util.Random;

public class PolarGen
{
	private double tarolt;
	private boolean nincsTarolt;
	private Random r;
	private int RAND_MAX;
	
	public PolarGen()
	{
		nincsTarolt = true;
		r = new Random();
		r.setSeed(20);
		this.RAND_MAX=100;
	}
	public PolarGen(Integer RAND_MAX)
	{
		nincsTarolt = true;
		r = new Random();
		r.setSeed(20);
		this.RAND_MAX=RAND_MAX;
	}
	
	public double kovetkezo()
	{
		if (nincsTarolt)
	    {
			
			double u1, u2, v1, v2, w;
			int i=0;
	        do
		    {
			      u1 = r.nextInt() / (RAND_MAX + 1.0);
			      u2 = r.nextInt() / (RAND_MAX + 1.0);
			      v1 = 2 * u1 - 1;
			      v2 = 2 * u2 - 1;
			      w = v1 * v1 + v2 * v2;
		    }
		    while (w > 1 && i++ < 40000000);
	        double r = Math.sqrt ((2 * Math.log10(w)) / w);
	        tarolt = r * v2;
	        nincsTarolt = !nincsTarolt;
	        return r * v1;
	    }
	    else
	    {
	        nincsTarolt = !nincsTarolt;
	        return tarolt;
	    }
	}
}  
]]></programlisting>
     
        </para>
        <para>
            A PolarGen programunk gyakorlatilag egy "random number generator".
            Létrehoztunk egy PolarGen osztályt. Ezt követően egy boolean változóba eltároljuk true értékkel, hogy nincs tárolt számunk.  
            Ezután megvizsgálja a szoftver, hogy van-e eltárolt szám, ha nincs, akkor generál két számot, az egyiket eltárolja, és a változót hamisra állítja.
            A program a futás végén a "tarolt" változó értékét téríti vissza.
            
        </para>   
        <para>
            Tutor: Rátóczi Martin Ferenc
        </para>            
    </section>        

    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
 <programlisting language="c"><![CDATA[           
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct node{
	char c;
	struct node* left;
	struct node* right;
} Node;

Node* fa;
Node gyoker;

#define null NULL

Node* create_empty()
{
	Node* tmp = &gyoker;
	tmp->c= '/';
	tmp->left = null;
	tmp->right = null;
	return tmp;
}

Node* create_node(char val)
{
	Node* tmp = (Node*)malloc(sizeof(Node));
	tmp->c=val;
	tmp->left = null;
	tmp->right = null;
	return tmp;
}

void insert_tree(char val)
{
	if(val=='0')
	{
		if(fa->left == null)
		{
			fa->left = create_node(val);
			fa = &gyoker;
			//printf("Inserted into left.");
		}
		else
		{
			fa = fa->left;
		}
	}
	else
	{
		if(fa->right == null)
		{
			fa->right = create_node(val);
			fa = &gyoker;
			//printf("Inserted into left.");
		}
		else
		{
			fa = fa->right;
		}
	}
}

void inorder(Node* elem,int depth)
{

	if(elem==null)
	{
		return;
	}
	inorder(elem->left,depth+1);
	if(depth) 
	{
		char *spaces;
		spaces =(char*) malloc(sizeof(char)*depth*2+1);
		for(int i=0;i<depth;i+=2)
		{
			spaces[i]='-';
			spaces[i+1]='-';
		}
		spaces[depth]='\0';

		printf("%s%c\n",spaces,elem->c);
	}
	else
	{
		printf("%c\n",elem->c);
	}
	inorder(elem->right,depth+1);
}

void preorder(Node* elem,int depth)
{
	if(elem==null)
	{
		return;
	}
	if(depth) 
	{
		char *spaces;
		spaces =(char*) malloc(sizeof(char)*depth*2+1);
		for(int i=0;i<depth;i+=2)
		{
			spaces[i]='-';
			spaces[i+1]='-';
		}
		spaces[depth*2]='\0';

		printf("%s%c\n",spaces,elem->c);
	}
	else
	{
		printf("%c\n",elem->c);
	}
	preorder(elem->left,depth+1);	
	preorder(elem->right,depth+1);
}
void postorder(Node* elem,int depth)
{
	if(elem==null)
	{
		return;
	}
	postorder(elem->left,depth+1);	
	postorder(elem->right,depth+1);
	if(depth) 
	{
		char *spaces;
		spaces =(char*) malloc(sizeof(char)*depth*2+1);
		for(int i=0;i<depth;i+=2)
		{
			spaces[i]='-';
			spaces[i+1]='-';
		}
		spaces[depth*2]='\0';

		printf("%s%c\n",spaces,elem->c);
		free(spaces);
	}
	else
	{
		printf("%c\n",elem->c);
	}
}

void destroy_tree(Node* elem)
{
	if(elem==null)
	{
		return;
	}
	destroy_tree(elem->left);
	destroy_tree(elem->right);
	if(elem->c == gyoker.c)
	{

	}
	else
	{
		free(elem);
	}
}

void usage()
{
	printf("Használat: ./binfa KAPCSOLÓ\n");
	printf("Az KAPCSOLÓ lehet:\n");
	printf("--preorder\tA bináris fa preorder bejárása\n");
	printf("--inorder\tA bináris fa inorder bejárása\n");
	printf("--postorder\tA bináris fa postorder bejárása\n");
}

int main(int argc, char** argv)
{
	srand(time(null));
	fa = create_empty();
	//gyoker = *fa;
	for(int i=0;i<10000;i++)
	{
		int x=rand()%2;
		if(x)
		{
			insert_tree('1');
		}
		else
		{
			insert_tree('0');
		}
	}
	if(argc == 2)
	{
		if(strcmp(argv[1],"--preorder")==0)
		{
			preorder(&gyoker,0);
		}
		else if(strcmp(argv[1],"--inorder")==0)
		{
			inorder(&gyoker,0);
		}
		else if(strcmp(argv[1],"--postorder")==0)
		{
			postorder(&gyoker,0);
		}
		else
		{
			usage();
		}
	}
	else
	{
		usage();
	}
	destroy_tree(&gyoker);
	return 0;
}
]]></programlisting>              
        </para>
        <para>
           Létrehozunk egy Node nevű struktúrát, ami a fa csomópontjait reprezentálja. A csomópontok rendelkeznek  egy változóval, illetve két pointerrel, melyek közül az egyik a nullára, másik az egyesre mutat.

        </para>
        <para>
            Egy függvény inicializál egy kitüntetett gyökérelemet, amelyet '/' reprezentál.
        </para>
        
        <para>
            A insert_tree  alkotja meg a fát. Megvizsgálja, hogy 0-át kap-e, ha igen, megvizsgálja, hogy a pointer által jelölt pontnak van-e 0-s gyermeke. 
            Ha van, akkor a mutató felveszi ennek értékét, más szóval "odalép". Ezzel szemben ha nincs 0-ás gyermek, létrehozza azt, majd a mutatót a gyökérre állítja (tehát visszalép a gyökérre, majd elölről kezdi az algoritmust). Abban az esetben, ha a kapott érték nem '0',  végrehajtja az utasításokat, a csomópont jobb gyermekén.
        </para>
        <para>
            A fabejárás inorder módon történik, ezesetben először a bal oldalon megyünk végig, majd a részfa gyökérelemét dolgozzuk fel, és ezt követően a jobb oldalát.
        </para>
        <para>
            A destroy_tree eljárás  postorder módon járja be a fát, majd rekurzió végén szabaddá teszi a gyökérelemet.
        </para>
        <para>
            Tutor: Rátóczi Martin Ferenc
        </para>
    </section>        
        
    <section>
        <title>Fabejárás</title>
        <para>
            Járd be az előző (inorder bejárású) fát pre- és posztorder is!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
<programlisting langueage="c"><![CDATA[
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct node{
	char c;
	struct node* left;
	struct node* right;
} Node;

Node* fa;
Node gyoker;

#define null NULL

Node* create_empty()
{
	Node* tmp = &gyoker;
	tmp->c= '/';
	tmp->left = null;
	tmp->right = null;
	return tmp;
}

Node* create_node(char val)
{
	Node* tmp = (Node*)malloc(sizeof(Node));
	tmp->c=val;
	tmp->left = null;
	tmp->right = null;
	return tmp;
}

void insert_tree(char val)
{
	if(val=='0')
	{
		if(fa->left == null)
		{
			fa->left = create_node(val);
			fa = &gyoker;
			//printf("Inserted into left.");
		}
		else
		{
			fa = fa->left;
		}
	}
	else
	{
		if(fa->right == null)
		{
			fa->right = create_node(val);
			fa = &gyoker;
			//printf("Inserted into left.");
		}
		else
		{
			fa = fa->right;
		}
	}
}

void inorder(Node* elem,int depth)
{

	if(elem==null)
	{
		return;
	}
	inorder(elem->left,depth+1);
	if(depth) 
	{
		char *spaces;
		spaces =(char*) malloc(sizeof(char)*depth*2+1);
		for(int i=0;i<depth;i+=2)
		{
			spaces[i]='-';
			spaces[i+1]='-';
		}
		spaces[depth]='\0';

		printf("%s%c\n",spaces,elem->c);
	}
	else
	{
		printf("%c\n",elem->c);
	}
	inorder(elem->right,depth+1);
}

void preorder(Node* elem,int depth)
{
	if(elem==null)
	{
		return;
	}
	if(depth) 
	{
		char *spaces;
		spaces =(char*) malloc(sizeof(char)*depth*2+1);
		for(int i=0;i<depth;i+=2)
		{
			spaces[i]='-';
			spaces[i+1]='-';
		}
		spaces[depth*2]='\0';

		printf("%s%c\n",spaces,elem->c);
	}
	else
	{
		printf("%c\n",elem->c);
	}
	preorder(elem->left,depth+1);	
	preorder(elem->right,depth+1);
}
void postorder(Node* elem,int depth)
{
	if(elem==null)
	{
		return;
	}
	postorder(elem->left,depth+1);	
	postorder(elem->right,depth+1);
	if(depth) 
	{
		char *spaces;
		spaces =(char*) malloc(sizeof(char)*depth*2+1);
		for(int i=0;i<depth;i+=2)
		{
			spaces[i]='-';
			spaces[i+1]='-';
		}
		spaces[depth*2]='\0';

		printf("%s%c\n",spaces,elem->c);
		free(spaces);
	}
	else
	{
		printf("%c\n",elem->c);
	}
}

void destroy_tree(Node* elem)
{
	if(elem==null)
	{
		return;
	}
	destroy_tree(elem->left);
	destroy_tree(elem->right);
	if(elem->c == gyoker.c)
	{

	}
	else
	{
		free(elem);
	}
}

void usage()
{
	printf("Használat: ./binfa KAPCSOLÓ\n");
	printf("Az KAPCSOLÓ lehet:\n");
	printf("--preorder\tA bináris fa preorder bejárása\n");
	printf("--inorder\tA bináris fa inorder bejárása\n");
	printf("--postorder\tA bináris fa postorder bejárása\n");
}

int main(int argc, char** argv)
{
	srand(time(null));
	fa = create_empty();
	//gyoker = *fa;
	for(int i=0;i<10000;i++)
	{
		int x=rand()%2;
		if(x)
		{
			insert_tree('1');
		}
		else
		{
			insert_tree('0');
		}
	}
	if(argc == 2)
	{
		if(strcmp(argv[1],"--preorder")==0)
		{
			preorder(&gyoker,0);
		}
		else if(strcmp(argv[1],"--inorder")==0)
		{
			inorder(&gyoker,0);
		}
		else if(strcmp(argv[1],"--postorder")==0)
		{
			postorder(&gyoker,0);
		}
		else
		{
			usage();
		}
	}
	else
	{
		usage();
	}
	destroy_tree(&gyoker);
	return 0;
}
]]></programlisting>               
        </para>
        <para>
            A preorder fabejárás annyiban különbözik az inordertől, hogy először a gyökérelemet dolgozzuk fel, majd járjuk be a részfa bal oldalát, és utána a jobb oldalát.
        </para>
        <para>
            A postorder esetében először a részfa bal oldalát dolgozzuk fel, majd a fa jobb oldalát, végül a gyökérelemet.
            Tutor: Rátóczi Martin Ferenc
        </para>
      
    </section>        
                        
    <section>
        <title>Tag a gyökér</title>
        <para>
            Az LZW algoritmust ültesd át egy C++ osztályba, legyen egy Tree és egy beágyazott Node
            osztálya. A gyökér csomópont legyen kompozícióban a fával!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
<programlisting><![CDATA[            
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define null NULL

class Binfa
{
private:
	class Node
	{
	public:
		Node(char c='/')
		{
			this->c=c;
			this->left = null;
			this->right = null;
		}
		char c;
		Node* left;
		Node* right;
	};
	Node* fa;
	

public:
	Binfa(): fa(&gyoker)
	{

	}
	
	void operator<<(char c)
	{
		if(c=='0')
		{
			if(fa->left == null)
			{
				fa->left = new Node('0');
				fa = &gyoker;
			}
			else
			{
				fa = fa->left;
			}
		}
		else
		{
			if(fa->right == null)
			{
				fa->right = new Node('1');
				fa = &gyoker;
			}
			else
			{
				fa = fa->right;
			}
		}
	}
	
	void preorder(Node* elem,int depth=0)
	{
		if(elem==null)
		{
			return;
		}
		if(depth) 
		{
			char *spaces;
			spaces =(char*) malloc(sizeof(char)*depth*2+1);
			for(int i=0;i<depth;i+=2)
			{
				spaces[i]='-';
				spaces[i+1]='-';
			}
			spaces[depth*2]='\0';

			printf("%s%c\n",spaces,elem->c);
		}
		else
		{
			printf("%c\n",elem->c);
		}
		preorder(elem->left,depth+1);	
		preorder(elem->right,depth+1);
	}

	void inorder(Node* elem,int depth=0)
	{
		if(elem==null)
		{
			return;
		}
		inorder(elem->left,depth+1);
		if(depth) 
		{
			char *spaces;
			spaces =(char*) malloc(sizeof(char)*depth*2+1);
			for(int i=0;i<depth;i+=2)
			{
				spaces[i]='-';
				spaces[i+1]='-';
			}
			spaces[depth*2]='\0';

			printf("%s%c\n",spaces,elem->c);
		}
		else
		{
			printf("%c\n",elem->c);
		}	
		inorder(elem->right,depth+1);
	}

	void postorder(Node* elem,int depth=0)
	{
		if(elem==null)
		{
			return;
		}
		postorder(elem->left,depth+1);
		postorder(elem->right,depth+1);
		if(depth) 
		{
			char *spaces;
			spaces =(char*) malloc(sizeof(char)*depth*2+1);
			for(int i=0;i<depth;i+=2)
			{
				spaces[i]='-';
				spaces[i+1]='-';
			}
			spaces[depth*2]='\0';

			printf("%s%c\n",spaces,elem->c);
		}
		else
		{
			printf("%c\n",elem->c);
		}	
	}

	void destroy_tree(Node* elem)
	{
		if(elem==null)
		{
			return;
		}
		destroy_tree(elem->left);
		destroy_tree(elem->right);
		if(elem->c!='/') delete elem;
	}

	Node gyoker;

};

void usage()
{
	printf("Használat: ./binfa KAPCSOLÓ\n");
	printf("Az KAPCSOLÓ lehet:\n");
	printf("--preorder\tA bináris fa preorder bejárása\n");
	printf("--inorder\tA bináris fa inorder bejárása\n");
	printf("--postorder\tA bináris fa postorder bejárása\n");
}

int main(int argc, char** argv)
{
	srand(time(0));
	Binfa bfa;
	for(int i=0;i<100;i++)
	{
		int x=rand()%2;
		if(x)
		{
			bfa<<'1';
		}
		else
		{
			bfa<<'0';
		}
	}
	if(argc == 2)
	{
		if(strcmp(argv[1],"--preorder")==0)
		{
			bfa.preorder(&bfa.gyoker);
		}
		else if(strcmp(argv[1],"--inorder")==0)
		{
			bfa.inorder(&bfa.gyoker);
		}
		else if(strcmp(argv[1],"--postorder")==0)
		{
			bfa.postorder(&bfa.gyoker);
		}
		else
		{
			usage();
		}
	}
	else
	{
		usage();
	}
	bfa.destroy_tree(&bfa.gyoker);
	return 0;
}
]]></programlisting>            
        </para>
        <para>
            A különbség a bináris fát kezelő függvények, ezek a Binfa osztályban vannak rendezve.
            A Binfaban privátban van a Node.
            A bitshift operátor mostmár fa építését csinálja.
            Tutor: Rátóczi Martin Ferenc
        </para>
    </section>        
                
    <section>
        <title>Mutató a gyökér</title>
        <para>
            Írd át az előző forrást, hogy a gyökér csomópont ne kompozícióban, csak aggregációban legyen a 
            fával!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:
            <programlising><![CDATA[
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define null NULL

class Binfa
{
private:
	class Node
	{
	public:
		Node(char c='/')
		{
			this->c=c;
			this->left = null;
			this->right = null;
		}
		char c;
		Node* left;
		Node* right;
	};
	Node* fa;
	

public:
	Binfa()
	{
		gyoker=fa=new Node();
	}
	

	void operator<<(char c)
	{
		if(c=='0')
		{
			if(fa->left == null)
			{
				fa->left = new Node('0');
				fa = gyoker;
			}
			else
			{
				fa = fa->left;
			}
		}
		else
		{
			if(fa->right == null)
			{
				fa->right = new Node('1');
				fa = gyoker;
			}
			else
			{
				fa = fa->right;
			}
		}
	}
	
	void preorder(Node* elem,int depth=0)
	{
		if(elem==null)
		{
			return;
		}
		if(depth) 
		{
			char *spaces;
			spaces =(char*) malloc(sizeof(char)*depth*2+1);
			for(int i=0;i<depth;i+=2)
			{
				spaces[i]='-';
				spaces[i+1]='-';
			}
			spaces[depth*2]='\0';

			printf("%s%c\n",spaces,elem->c);
		}
		else
		{
			printf("%c\n",elem->c);
		}
		preorder(elem->left,depth+1);	
		preorder(elem->right,depth+1);
	}

	void inorder(Node* elem,int depth=0)
	{
		if(elem==null)
		{
			return;
		}
		inorder(elem->left,depth+1);
		if(depth) 
		{
			char *spaces;
			spaces =(char*) malloc(sizeof(char)*depth*2+1);
			for(int i=0;i<depth;i+=2)
			{
				spaces[i]='-';
				spaces[i+1]='-';
			}
			spaces[depth*2]='\0';

			printf("%s%c\n",spaces,elem->c);
		}
		else
		{
			printf("%c\n",elem->c);
		}	
		inorder(elem->right,depth+1);
	}

	void postorder(Node* elem,int depth=0)
	{
		if(elem==null)
		{
			return;
		}
		postorder(elem->left,depth+1);
		postorder(elem->right,depth+1);
		if(depth) 
		{
			char *spaces;
			spaces =(char*) malloc(sizeof(char)*depth*2+1);
			for(int i=0;i<depth;i+=2)
			{
				spaces[i]='-';
				spaces[i+1]='-';
			}
			spaces[depth*2]='\0';

			printf("%s%c\n",spaces,elem->c);
		}
		else
		{
			printf("%c\n",elem->c);
		}	
	}

	void destroy_tree(Node* elem)
	{
		if(elem==null)
		{
			return;
		}
		destroy_tree(elem->left);
		destroy_tree(elem->right);
		if(elem->c!='/') delete elem;
	}

	Node* gyoker;

};

void usage()
{
	printf("Használat: ./binfa KAPCSOLÓ\n");
	printf("Az KAPCSOLÓ lehet:\n");
	printf("--preorder\tA bináris fa preorder bejárása\n");
	printf("--inorder\tA bináris fa inorder bejárása\n");
	printf("--postorder\tA bináris fa postorder bejárása\n");
}

int main(int argc, char** argv)
{
	srand(time(0));
	Binfa bfa;
	for(int i=0;i<100;i++)
	{
		int x=rand()%2;
		if(x)
		{
			bfa<<'1';
		}
		else
		{
			bfa<<'0';
		}
	}
	if(argc == 2)
	{
		if(strcmp(argv[1],"--preorder")==0)
		{
			bfa.preorder(bfa.gyoker);
		}
		else if(strcmp(argv[1],"--inorder")==0)
		{
			bfa.inorder(bfa.gyoker);
		}
		else if(strcmp(argv[1],"--postorder")==0)
		{
			bfa.postorder(bfa.gyoker);
		}
		else
		{
			usage();
		}
	}
	else
	{
		usage();
	}
	bfa.destroy_tree(bfa.gyoker);
	return 0;
}
]]></programlising> 
        </para>
         <para>
            Az előző feladaton kis módosítást végezve, kész is vagyunk. 
            A módosítás pedig abban nyilvánul meg, hogy a gyökérre már pointer mutat, azaz objektumként van kezelve.
            Ahol eddig a programunk a gyökér referenciáját kérte be, ott most magát a gyökeret kell megadnunk.
          Tutor: Rátóczi Martin Ferenc
         </para>
    </section>                     
    <section>
        <title>Mozgató szemantika</title>
        <para>
            Írj az előző programhoz mozgató konstruktort és értékadást, a mozgató konstruktor legyen a mozgató
            értékadásra alapozva!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
    </section>                     
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
</chapter>                